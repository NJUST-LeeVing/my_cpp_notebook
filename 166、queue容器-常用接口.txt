#include<iostream>
using namespace std;
#include<queue>
#include<string>

/*
queue常用接口：
功能描述：栈容器常用的对外接口

构造函数：
queue<T> stk;				//stack采用模板类实现，stack对象的默认构造形式
queue(const queue &que);	//拷贝构造函数

赋值操作：
queue& operator=(const queue &que);	//重载等号操作符

数据存取：
push(elem);		//向栈顶添加元素
pop();			//从栈顶一处第一个元素
top();			//返回栈顶元素

大小操作：
empty();	//判断栈区是否为空
size();		//返回栈的大小
*/

//队列 queue

class Person
{
public:
	Person(string name,int age)
	{
		this->m_Name = name;
		this->m_Age = age;
	}

	string m_Name;
	int m_Age;
};


void test01()
{
	//创建队列
	queue<Person>q;

	//准备数据
	Person p1("唐僧", 30);
	Person p2("孙悟空",1000);
	Person p3("猪八戒", 800);
	Person p4("沙和尚", 600);

	//入队
	q.push(p1);
	q.push(p2);
	q.push(p3);
	q.push(p4);

	cout << "队列大小：" << q.size() << endl;

	//判断：只要队列不为空，查看队头，查看队尾，出队
	while (!q.empty())
	{
		//查看队头
		cout << "队头元素：   姓名：" << q.front().m_Name << "年龄：" << q.front().m_Age << endl;

		//查看队尾
		cout << "队头元素：   姓名：" << q.back().m_Name << "年龄：" << q.back().m_Age << endl;
		
		cout << endl;
		//出队
		q.pop();

	}
	cout << "队列大小：" << q.size() << endl;
}

int main()
{
	test01();

	system("pause");

	return 0;
}
/*总结：
入队――push
出队――pop
返回队头元素――front
返回队尾元素――back
判断是否为空――empty
返回队列大小――size
*/