#include<iostream>
using namespace std;
#include<deque>

/*deque容器的基本概念
功能：双端数组，可以对头端进行插入删除操作

deque与vector的区别：
vector对于头文件的插入删除效率低。当数据量大时，效率越低。
deque相对而言，对头部的插入删除速度比vector快
vector访问元素是的速度会比deque快，这和两者内部的实现有关。


deque内部工作原理：（有图）
deque内部有个 中控器 ，维护每段缓冲区中的内容，缓冲区中存放真实数据
中控器维护的是每个缓冲区的地址，使得使用deque是想一片连续的内存空间（有图）

deque容器的迭代器也是支持随机访问的。如：访问 v.begin()+2 这个元素

*/

/*deque构造函数
功能描述：deque容器构造

函数原型：
deque<T> deqT;				//默认构造形式。
deque(beg,end);				//构造函数将[beg,end)区间中的元素拷贝给本身。
deque(n,elem);				//构造函数将n个elem拷贝给本身。
deque(const deque &deq);	//拷贝构造函数。

*/

//deque容器 构造函数

//打印输出功能
void PrintDeque(const deque<int>&d)//添加const防止人为改写数据，并且后续步骤中的iterator要改为const_iterator
{
	for (deque<int>::const_iterator it = d.begin(); it != d.end(); it++)
	{
		//*it=100;
		cout << *it << " ";
	}
	cout << endl;
}

void test01()
{
	deque<int>d1;
	for (int i = 0; i < 10; i++)
	{
		d1.push_back(i);
	}
	PrintDeque(d1);

	deque<int>d2(d1.begin()+1, d1.end()-1);
	PrintDeque(d2);

	deque<int>d3(10, 100);
	PrintDeque(d3);

	deque<int>d4(d3);
	PrintDeque(d4);

}

int main()
{
	test01();
	system("pause");

	return 0;
}
//deque容器和vector容器的构造方式几乎一致，灵活使用即可