#include<iostream>
using namespace std;
#include<vector>
/*
vector基本概念
功能：
vector数据结构和数组非常相似，也称为 单端数组

vector与普通数组的区别：
不同之处在于数组是静态空间，而vector可以动态拓展

动态拓展：
并不是在原来的空间之后接新空间，而是找更大的内存空间，然后将原来的数据拷贝到新的空间，并且释放原来的空间

vector容器的迭代器是支持随机访问的迭代器

*/

/*
vector构造函数
功能描述：创建vector容器

函数原型：
vecotr<T> v;	//采用模板实现类实现，默认构造函数
vector(v.begin(), v.end());	//将v[begin(),end)区间中的元素拷贝给本身-->注意是左闭右开
vector(n, elem);	//构造函数将n个elem拷贝给本身
vector(const vector &vec);	//拷贝构造函数
*/

//打印函数
void PrintVector(vector<int>&v)
{
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;
}

//vector容器的构造
void test01()
{
	//默认构造/无参构造
	vector<int>v1;
	
	for (int i = 0; i < 10; i++)
	{
		v1.push_back(i);

	}
	PrintVector(v1);

	//通过区间访问进行构造
	vector<int>v2(v1.begin() + 1, v1.end() - 1);
	PrintVector(v2);

	//n个elem方式构造
	vector<int>v3(10, 100);//10个100
	PrintVector(v3);

	//拷贝构造
	vector<int>v4(v3);
	PrintVector(v4);

}

int main()
{
	test01();
	system("pause");

	return 0;
}
