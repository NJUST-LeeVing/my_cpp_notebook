//本节目标：明白默认构造函数和拷贝构造函数调用的时机。

#include<iostream>
using namespace std;

//创建一个类，C++编译器都会自动添加至少三种函数

//默认构造函数（无参，函数体为空）

//默认析构函数（无参，函数体为空）

//默认拷贝构造函数，对属性进行赋值。


//如果写了有参构造函数，编译器就不会自动提供默认构造函数，但是会提供默认拷贝构造函数。
//如果写了拷贝构造函数，编译器就不会自动提供默认构造函数。

class Person
{
	friend void test01();
	friend void test02();
public:
	
	Person()
	{
		cout<<"默认构造函数的调用！"<<endl;
	}

	Person(int age)
	{
		m_Age=age;
		cout<<"有参构造函数的调用！"<<endl;
	}

	/*Person(const int &age)
	{
		cout<<"拷贝构造函数的调用！"<<endl;
	}*/

	~Person()
	{
		cout<<"析构函数的调用！"<<endl;
	}

private:
	int m_Age;
};

void test01()
{
	Person p1;
	p1.m_Age =18;
	Person p2(p1);//该过程会伴随拷贝构造函数的调用！
	cout<<"p2的年龄为："<<p2.m_Age <<endl;//注：操作此步骤需删除Person类中的拷贝构造函数//
	//即使没有创建拷贝构造函数，编译器也会自动将p1的数据自动拷贝到p2上！
}

void test02()
{
	Person p3(20);
	Person p4(p3);
	cout<<"p4的年龄为："<<p4.m_Age <<endl;
}

void test03()
{
	Person p5(10);
}

int main()
{
	test01();
	test02();
	test03();
	
	system("pause");
	return 0;
}


//补充案例：
#include<iostream>
using namespace std;

class Person
{
public:
	Person()
	{}
	Person(int age)
	{
		m_Age=age;
	}
	Person(const Person &p)
	{
		cout<<"傻逼！"<<endl;
	}
	~Person()
	{}
	int m_Age;
};

void test()
{
	Person p1(20);
	Person p2(p1);
	cout<<"p2的年龄："<<p2.m_Age <<endl;
}

int main()
{
	test();
	
	system("pause");

	return 0;
}
//如果没有创建Person的拷贝构造函数，编译器还可以将p1的数据拷贝到p2身上。但是如果人为创建了拷贝构造函数，编译器就不会自动拷贝，而是指向人为创造出的拷贝构造函数中的内容。
	