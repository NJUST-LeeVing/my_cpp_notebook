#include<iostream>
using namespace std;
#include<string>

//继承中同名成员处理方式
class Base
{
public:
	Base()
	{
		m_A=100;
	}
	
	void func()
	{
		cout<<"Base-func()的调用！"<<endl;
	}

	void func(int a)
	{
		cout<<"Base-func(int a)的调用！"<<endl;
	}
	int m_A;
};
class Son:public Base
{
public:
	Son()
	{
		m_A=200;
	}
	void func()
	{
		cout<<"Son-func()的调用！"<<endl;
	}
	
	int m_A;
};

void test01()
{
	Son s;
	cout<<"Son中的m_A="<<s.m_A <<endl;
	//如果通过子类对象 访问父类中的同名成员，需要加作用域
	cout<<"Base中的m_A="<<s.Base::m_A <<endl;
}

//同名成员函数处理
void test02()
{
	Son s;
	s.func ();//直接调用的是子类中的成员
	s.Base::func();//添加作用域 访问父类中的成员函数。
	//s.func (10); 如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类中的所有同名成员函数。
}

int main()
{
	test02();
	system("pause");

	return 0;
}