#include<iostream>
using namespace std;
#include<vector>

/*vector的容量和大小：
功能描述：对vector容器的容量和大小操作

函数原型：
empty();				//判断容器是否为空
capacity();				//容器的容量
size();					//返回容器中元素的个数
resize(int num);		//重新指定容器的长度为num，如果容器变长，则以默认值填充新的位置
						//如果容器变短，则以末尾超出容器长度的元素被删除
resize(int num, elem);	//重新指定容器的长度为num，若同期变长，则以elem值填充新位置
						//若容器变短，则末尾超出容器长度的元素被删除

注意：capacity>=size

*/

//打印函数
void PrintVector(vector<int>& v)
{
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << " ";
	}
	cout << endl;
}

//vector容器的容量和大小的操作
void test01()
{
	vector<int>v1;
	for (int i = 0; i < 10; i++)
	{
		v1.push_back(i);
	}
	PrintVector(v1);

	if (v1.empty())//为真，代表容器为空
	{
		cout << "v1为空！" << endl;
	}
	else
	{
		cout << "v1不为空！" << endl;
		cout << "v1的容量为：" << v1.capacity() << endl;
		cout << "v1的大小为：" << v1.size() << endl;
	}

	//重新指定大小
	v1.resize(15);//重新设定容器的容量
	PrintVector(v1);//如果重新指定的比原来更长，默认用数字0进行填充
	v1.resize(20,100);//可以指定默认值为100
	PrintVector(v1);
	v1.resize(5);//如果重新指定的比原来短了，多余的部分会删除
	PrintVector(v1);
}

int main()
{
	test01();
	system("pause");

	return 0;
}
/*总结：
判断是否为空--empty
返回元素个数--size
返回容器容量--capacity
重新指定大小--resize
*/