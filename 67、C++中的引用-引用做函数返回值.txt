//本节目标：引用作为函数的返回值时防止创建的变量丢失（创建静态变量解决该问题）。函数的调用可以作为左值。

#include<iostream>
using namespace std;

//引用作为函数的返回值
//1、不要返回局部变量的引用
int& test01()
{
	int a=10;
	return a;//变量a储存在栈区中，函数运行完毕及会被释放掉。
}

//2、函数的调用可以作为左值
int& test02()
{
	static int b=10;
	return b;
}

int* test03()
{
	int d1=10;
	int* c1=&d1;
	return c1;

}

int* test04()
{
	static int d2=10;
	int* c2=&d2;
	return c2;
}

int main()
{
	int &a=test01();
	cout<<a<<endl;
	cout<<a<<endl;//乱码

	int &b=test02();
	test02()=1000;
	cout<<b<<endl;//b的值为1000

	//活学活用：返回值是指针(static限定)，函数可以作为左值。
	int *c1=test03();
	cout<<"c1="<<*c1<<endl;
	cout<<"c1="<<*c1<<endl;//乱码，指针c指向的内存已经被释放。

	int *c2=test04();
	cout<<"c2="<<*c2<<endl;
	cout<<"c2="<<*c2<<endl;

	system("pause");
	return 0;
}
