#include<iostream>
using namespace std;

//左移运算符重载

class Person
{
	friend ostream &operator<<(ostream &out,Person &p);
public:
	Person(int a,int b)
	{
		m_A=a;
		m_B=b;
	}

	//利用成员函数重载 左移运算符
	//void operator<<(ostream &cout){}  错误操作，因为该化简的p<<cout而不是cout<<p
	//不能利用成员函数重载<<运算符，因为无法实现cout在左侧
private:
	int m_A;
	int m_B;

};

//只能利用全局函数重载左移运算符
ostream &operator<<(ostream &out,Person &p) //本质 operator<<(cout，p) 简化为cout<<p  //思考：参数可以是值而不是引用吗？
{
	cout<<"m_A="<<p.m_A<<"  m_B="<<p.m_B;
	return out;//out是cout的别名
}

void test01()
{
	Person p(10,20);
	
	cout<<p<<endl;//如果全局函数调用后返回的是void，则不能进行链式编程
	
}

int main()
{
	test01();
	
	system("pause");

	return 0;
}

//左移运算符配合友元可以输出自定义数据类型