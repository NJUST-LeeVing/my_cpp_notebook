#include<iostream>
using namespace std;

/*多态-->多种状态
多态分为两类:：
静态多态：函数重载 和 运算符重载 属于静态多态，复用函数名
动态多态：派生类（子类）和虚函数同时运行实现多态

静态多态和动态多态的区别：
静态多态的函数地址是早绑定，编译阶段确定函数地址
动态多态的函数地址是晚绑定，运行阶段确定函数地址
*/

//动物类
class Animal
{
public:

	virtual void speak()
	{
		cout<<"动物在说话！"<<endl;
	}

};

//猫类
class Cat:public Animal
{
public:
	void speak()//子类中的virtual可写可不写。
	{
		cout<<"小猫在说话！"<<endl;
	}

};

class Dog:public Animal
{
public:
	void speak()
	{
		cout<<"小狗在说话！"<<endl;
	}
};

//执行说话的函数
//地址早绑定  在编译阶段确定函数地址
//如果想要猫说话，这个函数的地址就不能提前绑定，需要在运行阶段进行绑定，也就是地址晚绑定
void dospeak(Animal &animal)//父类（Animal）的引用指向子类的对象  //C++中父类的引用可以指向子类的对象
{
	animal.speak();//简单来说，函数speak()具有多种形态，函数speak()不能提前定下来，需要根据传入的对象来确定。

}
//动态多态满足条件
//1、继承关系
//2、子类要重写父类的虚函数//区别函数的重写和重载

//动态多态的使用
//父类的指针或者引用指向子类的对象

void test01()
{
	Cat cat;
	dospeak(cat);
	
	Dog dog;
	dospeak(dog);
}

int main()
{
	test01();
	system("pause");
	return 0;
}