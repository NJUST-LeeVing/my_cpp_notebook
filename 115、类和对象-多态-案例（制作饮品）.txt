#include<iostream>
using namespace std;

//多态 案例：制作饮品

class AbstractDrinking
{
public:
	//煮水
	virtual void Boil()=0;
	//冲泡
	virtual void Brew()=0;
	//倒入杯中
	virtual void PourInCup()=0;
	//加入辅料
	virtual void PutSomething()=0;

	//制作饮品
	void makeDrink()
	{
		Boil();
		Brew();
		PourInCup();
		PutSomething();
	}
};

//制作咖啡
class Coffee:public AbstractDrinking
{
public:
	//煮水
	virtual void Boil()
	{
		cout<<"煮农夫山泉"<<endl;
	}
	//冲泡
	virtual void Brew()
	{
		cout<<"冲泡咖啡"<<endl;
	}
	//倒入杯中
	virtual void PourInCup()
	{
		cout<<"倒入杯中"<<endl;
	}
	//加入辅料
	virtual void PutSomething()
	{
		cout<<"加入糖和牛奶"<<endl;
	}

};

//制作茶叶
class Tea:public AbstractDrinking
{
public:
	//煮水
	virtual void Boil()
	{
		cout<<"煮矿泉水"<<endl;
	}
	//冲泡
	virtual void Brew()
	{
		cout<<"冲泡茶叶"<<endl;
	}
	//倒入杯中
	virtual void PourInCup()
	{
		cout<<"倒入杯中"<<endl;
	}
	//加入辅料
	virtual void PutSomething()
	{
		cout<<"加入枸杞"<<endl;
	}

};

//制作函数
void doWork(AbstractDrinking *p)//父类的指针指向子类的对象
{
	p->makeDrink ();//一个接口(p)有多种形态(coffee、tea)
	delete p;
}


void test01()
{
	//制作咖啡
	doWork(new Coffee);
	cout<<"-------------------------------"<<endl;
	//制作茶叶
	doWork(new Tea);
}

int main()
{
	test01();
	system("pause");

	return 0;
}





//思考：以下案例哪里错误？
#include<iostream>
using namespace std;

class Base
{
public:
	virtual void boil()=0;
	virtual void pour()=0;
	virtual void add()=0;

	void step()
	{
		boil();
		pour();
		add();
	}
};

class Coffee:public Base
{
public:
	virtual void boid()
	{
		cout<<"煮水"<<endl;	
	}
	virtual void pour()
	{
		cout<<"倒水"<<endl;
	}
	virtual void add()
	{
		cout<<"加方糖"<<endl;
	}


};

class Tea:public Base
{
public:
	virtual void boid()
	{
		cout<<"煮水"<<endl;	
	}

	virtual void pour()
	{
		cout<<"倒水"<<endl;
	}

	virtual void add()
	{
		cout<<"加方糖"<<endl;
	}
};

void dowork(Base *b)
{
	b->step ();
	delete b;
}

void test01()
{
	//Coffee coffee;
	//Tea tea;
	dowork(new Tea);
	cout<<"------------------"<<endl;
	dowork(new Coffee);

}

int main()
{
	test01();
	system("pause");

	return 0;
}