本节目标：掌握类作友元。掌握new Building(一个类名)类似的表达方式。

#include<iostream>
using namespace std;
#include<string>

//类作友元
class Building;
class GoodGay
{
public:
	GoodGay();

	void visit();//参观函数  访问Building中的属性

	Building *building;
};

class Building
{
	//GoodGay是Building类的好朋友，可以访问Building类的私有成员
	friend class GoodGay;
public:
	Building();

public:

	string m_SittingRoom;//客厅

private:

	string m_BedRoom;//卧室

};

//类外写成员函数
Building::Building()
{
	m_SittingRoom="客厅";
	m_BedRoom="卧室";
}
GoodGay::GoodGay ()
{
	//创建建筑物对象 ：这一步的作用是从GoodGay函数到Building函数的钥匙。
	building=new Building;
	//必须记住该表示方法的意义！！！类似new  int(10)。Building和int(10)是一样的。
}

void GoodGay::visit()
{
	cout<<"GoodGay is visiting:"<<building->m_SittingRoom <<endl;
	cout<<"GoodGay is visiting:"<<building->m_BedRoom <<endl;
}
void test01()
{
	GoodGay gg;
	gg.visit ();

}

int main()
{
	test01();
	system("pause");

	return 0;
}



//发现不同

#include<iostream>
using namespace std;
#include<string>

class Building
{
	friend class GoodGay;
public:
	Building()
	{
		m_SittingRoom="SittingRoom";
		m_BedRoom="BedRoom";
	}

public:
	string m_SittingRoom;
	
private:
	string m_BedRoom;
};

class GoodGay
{
public:
	void visit()
	{
		cout<<"GoodGay is visiting your:"<<building.m_SittingRoom <<endl;

		cout<<"GoodGay is visiting your:"<<building.m_BedRoom <<endl;
	}
	Building building;

};

void test01()
{
	GoodGay gg;
	gg.visit ();

}
int main()
{
	test01();
	system("pause");

	return 0;
}