#include<iostream>
using namespace std;

//继承中的同名静态成员处理方式
class Base
{
public:
	static int m_A;

	static void func()
	{
		cout<<"Base-static void func()的调用！"<<endl;
	}

	static void func(int a)
	{
		cout<<"Base-static void func(int a)的调用！"<<endl;
	}
};
int Base::m_A =100;

class Son:public Base
{
public:
	static int m_A;

	static void func()
	{
		cout<<"Son-static void func()的调用！"<<endl;
	}
};
int Son::m_A =200;


//同名静态成员属性
void test01()
{
	//通过对象访问数据
	cout<<"通过对象访问："<<endl;
	Son s;
	cout<<"Son中的m_A="<<s.m_A <<endl;
	cout<<"Base中的m_A="<<s.Base::m_A  <<endl;

	//通过类名访问数据
	cout<<"通过类名访问："<<endl;
	cout<<"Son中的m_A="<<Son::m_A <<endl;
	cout<<"Base中的m_A="<<Son::Base::m_A <<endl; //也可以写作：cout<<"Base中的m_A="<<Base::m_A <<endl;
	
}

//同名静态成员函数
void test02()
{
	//1、通过对象访问
	cout<<"通过对象访问："<<endl;
	Son s;
	s.func ();
	s.Base::func ();

	//2、通过类名访问
	cout<<"通过类名访问："<<endl;
	Son::func ();

	Son::Base ::func ();//也可以写作Base::func ();
	//子类出现和父类同名静态成员函数，也会隐藏父类中所有同名成员函数。如果想访问父类中被隐藏的成员，需要加作用域。
	Son::Base ::func (100);// 也可以写作Base::func (100);
}

int main()
{
	test01();
	test02();
	system("pause");

	return 0;
}