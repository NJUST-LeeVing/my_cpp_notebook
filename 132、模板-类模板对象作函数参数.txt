#include<iostream>
using namespace std;
#include<string>

//类模板实例化出的对象，向函数传参的方式一共有三种：
//1、指定传入的类型-->直接显示对象的数据类型
//2、参数模板化-->将对象中的参数变为模板进行传递
//3、整个类模板化-->将这个对象类型模板化再进行传递


template<class T1, class T2>
class Person
{
public:
	Person(T1 name, T2 age)
	{
		m_Name = name;
		m_Age = age;
	}
	void Show()
	{
		cout << "姓名：" << m_Name << endl;
		cout << "年龄：" << m_Age << endl;
	}

	T1 m_Name;
	T2 m_Age;
};

//1、指定传入类型(最常用)
void Print01(Person<string,int>&p1)
{
	p1.Show();
}


void test01()
{
	Person<string, int>p1("孙悟空", 100);
	Print01(p1);
}

//2、参数模板化
template<class T1,class T2>
void Print02(Person<T1,T2>&p2)
{
	p2.Show();
	//判断数据的类型
	cout << "T1的类型为：" << typeid(T1).name() << endl;
	cout << "T2的类型为：" << typeid(T2).name() << endl;
}

void test02()
{
	Person<string, int>p2("猪八戒", 98);
	Print02(p2);
}

//3、整个类模板化
template<class T>
void Print03(T &p3)
{
	p3.Show();
	cout << "T的类型为：" << typeid(T).name() << endl;
}

void test03()
{
	Person<string, int>p3("沙和尚", 89);
	Print03(p3);
}

int main()
{
	test01();
	test02();
	test03();
	system("pause");

	return 0;
}
