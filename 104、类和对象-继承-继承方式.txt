#include<iostream>
using namespace std;
#include<string>

//继承方式

//公共继承
class Base1
{
public:
	int m_A;
protected:
	int m_B;
private:
	int m_C;
};

class Son1:public Base1
{
public:

	void func()
	{
		m_A=10;//父类中的公共权限成员 到子类中依然是公共权限
		m_B=10;//父类中的保护权限成员 到子类中依然是保护权限
		//m_C=10;//父类中的私有权限成员，子类无法获取。
	}
};

void test01()
{
	Son1 s1;
	s1.m_A=100;
	//s1.m_B =100; 到Son1中m_B是保护权限成员，在类外无法访问
	
}

//保护继承
class Base2
{
public:
	int m_A;
protected:
	int m_B;
private:
	int m_C;
};

class Son2:protected Base2
{
public:
	void func()
	{
		m_A=100;//父类中公共权限的成员，到子类中变为保护权限
		m_B=100;//父类中保护权限的成员，到子类中变为保护权限
		//m_C=100;//父类中的私有成员 子类无法访问
	}
}

void test02()
{
	Son2 s2;
	//s2.m_A =1000;//在Son2中，m_A变为保护权限，因此类外无法访问
	//s2.m_B =1000;//同理
}

//私有继承
class Base3
{
public:
	int m_A;
protected:
	int m_B;
private:
	int m_C;
};

class Son3:private Base3
{
public:
	void func()
	{
		m_A=100;//父类中符公共成员，到子类中变为私有成员
		m_B=100;//父类中符保护成员，到子类中变为私有成员
		//m_C=100;//父类中的私有成员无法访问。
	}
};

class Grandson3:public Son3
{
public:
	void func()
	{
		//m_A=1000;//到了Son3中，m_A变为私有，即使是孙子，也无法访问。
		//m_B=1000;//到了Son3中，m_B变为私有，即使是孙子，也无法访问。
	}
};

void test03()
{
	Son3 s3;
	//s3.m_A =1000;
	//s3.m_B =1000;
}

int main()
{
	
	system("pause");

	return 0;
}


//我的笔记：验证保护权限的方法
#include<iostream>
using namespace std;

class Base
{
public:
	int m_A;
protected:
	int m_B;
private:
	int m_C;
};

class Son1:public Base
{
	Base::m_A ;
	Base::m_B ;
	Base::m_C ;
};

class Son2:protected Base
{
	Base::m_A ;
	Base::m_B ;
	Base::m_C ;
}

class Son3:private Base
{
	Base::m_A ;
	Base::m_B ;
	Base::m_C ;
}


void test()
{
	Son1 s1;
	s1.m_A ;
	s1.m_B;
	s1.m_C ;

	Son2 s2;
	s2.m_A ;
	s2.m_B ;
	s2.m_C ;

	Son3 s3;
	s3.m_A ;
	s3.m_B;
	s3.m_C ;
}

int main()
{
	test();

	system("pause");

	return 0;
}
