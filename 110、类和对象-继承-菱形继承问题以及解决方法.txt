#include<iostream>
using namespace std;

//动物 类
class Animal
{
public:
	int m_Age;
};

//利用虚继承 解决菱形继承的问题
//在继承之前 加上关键字 virtual 变为虚继承
//Animal类称为 虚基类 

//羊类
class Sheep:virtual public Animal
{};

//驼类
class Camel: virtual public Animal
{};

//羊驼 类
class SheepCamel:public Sheep,public Camel
{};

void test01()
{
	//当出现菱形继承时，两个父类拥有相同的数据，需要加以作用域区分
	SheepCamel sc;
	sc.Sheep::m_Age =18;
	sc.Camel::m_Age =20;
	cout<<"羊的年龄："<<sc.Sheep::m_Age<<endl;
	cout<<"驼的年龄："<<sc.Camel::m_Age<<endl;
	//菱形继承导致数据m_Age有两份，浪费资源。需要用虚继承的方法解决。
	cout<<"羊驼的年龄："<<sc.m_Age <<endl;
	
}

int main()
{
	test01();
	system("pause");

	return 0;
}

/*
虚继承原理？？？
vbptr（虚基类指针）：v--virtual  b--base  ptr--point 
虚基类指针指向vbtable（虚基类表）。
*/
//总结：
//菱形继承导致数据m_Age有两份，浪费资源。需要用虚继承的方法解决。
//利用虚继承可以解决菱形继承问题。