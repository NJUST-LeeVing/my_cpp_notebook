//本节目标：明白浅拷贝和深拷贝，学会深拷贝。用恰当的方法验证“先入后出”的原理。
//掌握在析构函数中创建析构代码和在拷贝构造函数中手动开辟堆区存放数据。
//知道深拷贝应用的时机。
#include<iostream>
using namespace std;

//深拷贝与浅拷贝
//浅拷贝：由编译器自动拷贝
//深拷贝：人为在堆区开辟一段空间进行拷贝。传输方重新在堆区开辟一块内存，再传给接收方

class Person
{
	friend void test01();
public:
	Person()
	{
		cout<<"Person的默认构造函数调用。"<<endl;
	}

	Person(int age,int height)
	{
		m_Age=age;
		//m_Height=&height;  //变量height从有参构造函数传出到test01函数后被释放
		m_Height=new int (height);//将height变量储存到堆区，不会被释放。
		cout<<"Person的有参构造函数调用。"<<endl;
	}

	Person(const Person &p)//自己解决浅拷贝带来的问题。
	{
		m_Age=p.m_Age ;
		//在拷贝的过程中由于p1和p2的m_Height是一样的，而p1的地址在p1运行后就被释放掉。所以p2不能重复释放p1上的那段地址。
		//解决方法：将p1的m_Height的值放入另一个堆区，用p2的m_Height去接收p1的m_Height的地址。
		m_Height=new int(*p.m_Height );
		//此处new int 而不是new Person是因p.m_Height是int数据类型的。
		cout<<"Person的拷贝构造函数调用。"<<endl;
	}

	~Person()
	{
		if(m_Height!=NULL)//注意：堆区开辟的数据在使用完后最好释放掉
		{
			delete m_Height;
			m_Height=NULL;
		}
		
		cout<<"析构函数的调用。"<<endl;
	}

private:
	int m_Age;
	int* m_Height;

};

void test01()
{
	Person p1(18,187);
	cout<<"p1的年龄为："<<p1.m_Age <<"  p1的身高为："<<*p1.m_Height <<endl;//p1.m_Height访问的就是有参构造函数中的变量height。
	Person p2(p1);
	cout<<"p2的年龄为："<<p2.m_Age <<"  p2的身高为："<<*p2.m_Height <<endl;
	//注意：编译器先释放p2，再释放p1.“先进后出”。
}


int main()
{

	test01();

	system("pause");

	return 0;

}