//本节目标：学会验证父类的指针在释放时无法调用子类的析构代码
#include<iostream>
using namespace std;
#include<string>
//多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码
//解决方式：将父类中的析构函数改为虚析构或者纯虚析构

//虚析构和纯虚析构的共性：
//可以解决父类指针释放子类对象
//都需要具体的函数实现

//虚析构和纯虚析构的区别：
//如果是纯虚析构，该类属于抽象类，无法实例化对象

//虚析构的语法：  virtual ~类名(){}
//纯虚析构的语法： 类内-->virtual ~类名(){}   类外-->类名::~类名(){}


class Animal
{
public:
	Animal()
	{
		cout<<"Animal的默认构造函数调用"<<endl;
	}

	//virtual~Animal()//虚析构可以解决父类指针释放子类对象时不彻底的问题。
	//{
	//	cout<<"Animal的析构函数调用"<<endl;
	//}

	//纯虚析构  需要声明，也需要实现。 纯虚函数不需要实现。
	virtual ~Animal()=0;

	virtual void speak()=0;

};
Animal::~Animal()
{
	cout<<"Animal的析构函数调用"<<endl;
}

class Cat:public Animal
{
public:
	Cat(string name)
	{
		cout<<"Cat的有参构造函数调用"<<endl;
		m_Name=new string (name);//子类属性开辟到堆区
	}

	virtual void speak()
	{
		cout<<*m_Name<<"小猫在说话"<<endl;
	}

	~Cat()
	{
		if(m_Name!=NULL)
		{
			cout<<"Cat的析构函数调用"<<endl;
			delete m_Name;
			m_Name=NULL;
		}
	}


	string *m_Name;
};

void test01()
{
	Animal *animal=new Cat("Tom");
	animal->speak ();
	//父类指针在析构的时候 不会调用子类中的析构函数，导致子类如果有堆区属性，出现内存泄露
	delete animal;

}


int main()
{
	test01();
	system("pause");

	return 0;
}

/*总结：
1、虚析构或纯虚析构是用类解决父类指针释放子类对象的问题。
2、如果子类中没有堆区数据，可以不写虚析构或纯虚析构。
3、拥有纯虚析构的函数的类也属于抽象类。
*/